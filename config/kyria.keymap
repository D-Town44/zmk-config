/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * 
 * Keymap by Daniel Willeitner
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEV 0
#define NUM 1
#define ARR 2

/ {
	keymap {
		compatible = "zmk,keymap";

		// Base Layer: QWERTY
		//
		// ,-------------------------------------------.                              ,-------------------------------------------.
		// |   TAB  |   Q  |   W  |   E  |   R  |   T  |                              |   Y  |   U  |   I  |   O  |   P  |  - _   |
		// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
		// |Ctrl/ESC|   A  |   S  |   D  |   F  |   G  |                              |   H  |   J  |   K  |   L  | ;  : |  ' "   |
		// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
		// | LShift |   Z  |   X  |   C  |   V  |   B  | Play | Skip |  |      |C+W+S4|   N  |   M  | ,  < | . >  | /  ? |  = +   |
		// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
		//                        | ENCL |  ARR | BS   | CMD  |C^B   |  | Opt  | Enter| Space|  NUM | ENCR |
		//                        |      |      |      |      |      |  |      |      | Lower|      |      |
		//                        `----------------------------------'  `----------------------------------'
		//
		base_layer {
		  label = "DEV";
				bindings = <
					&kp TAB				&kp Q &kp W &kp E		&kp R			&kp T																															      &kp Y			&kp U		&kp I     &kp O   &kp P    &kp MINUS
					&mt LCTRL ESC &kp A &kp S &kp D		&kp F			&kp G																															      &kp H			&kp J		&kp K     &kp L   &kp SEMI &kp SQT
					&kp LSHFT			&kp Z &kp X &kp C		&kp V			&kp B			&kp C_PLAY	&kp C_NEXT   &none			&kp LS(LC(LG(NUMBER_4)))	&kp N			&kp M		&kp COMMA &kp DOT &kp FSLH &kp EQUAL
																		&none		&mo ARR		&kp BSPC	&kp LCMD		&kp LC(B)    &kp LALT		&kp ENTER					        &kp SPACE &mo NUM &none
					>;

					sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
		};

		// Base Layer: Numbers
		//
		// ,-------------------------------------------.                              ,-------------------------------------------.
		// |   ` ~  |   !  |   @  |   #  |   $  |   %  |                              |   ^  |   &  |   *  |   (  |   )  |  \ |   |
		// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
		// |        |   1  |   2  |   3  |   4  |   5  |                              |   6  |   7  |   8  |   9  |   0  |  \ |   |
		// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
		// | BT CLR |BT NXT|      |      |   {  | { [  |      |      |  |      | QUIT |  } ] |   }  |      |      |      |        |
		// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
		//                        |      |      |      |      |      |  |      |      |      |      |      |
		//                        |      |      |      |      |      |  |      |      |      |      |      |
		//                        `----------------------------------'  `----------------------------------'
		//
		num_layer {
		  label = "NUM";
				bindings = <
					&kp GRAVE		&kp EXCL			&kp AT	      &kp HASH	    &kp DLLR	    &kp PRCNT																		    &kp CARET     &kp AMPS      &kp STAR      &kp LPAR	    &kp RPAR	    &kp BSLH
					&none				&kp NUMBER_1	&kp NUMBER_2	&kp NUMBER_3  &kp NUMBER_4	&kp NUMBER_5																		&kp NUMBER_6	&kp NUMBER_7	&kp NUMBER_8  &kp NUMBER_9	&kp NUMBER_0	&kp BSLH
					&bt BT_CLR	&bt BT_NXT		&none		      &none			    &kp LBRC	    &kp LBKT	    &none &none		&none &kp LC(LG(Q))	&kp RBKT	&kp RBRC  &none			&none			&none			&none
																						      &none			    &none			    &none			    &none	&none		&none &none					&none			&none			&none
					>;

					sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
		};

		// Base Layer: Arrows
		//
		// ,-------------------------------------------.                              ,-------------------------------------------.
		// |        |      |      |      |      |      |                              |      |      |      |      |      |        |
		// |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
		// |        |      |      |      |      |      |                              | LEFT | DOWN |  UP  | RIGHT|      |        |
		// |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
		// |        |      |      |      |      |      |      |      |  |      |      |      |      |      |      |      |        |
		// `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
		//                        |      |      |      |      |      |  |      |      |      |      |      |
		//                        |      |      |      |      |      |  |      |      |      |      |      |
		//                        `----------------------------------'  `----------------------------------'
		//
		arr_layer {
		  label = "ARR";
				bindings = <
					&none &none &none &none &none &none                           &none     &none     &none   &none     &none &none
					&none	&none &none &none &none &none                           &kp LEFT	&kp DOWN	&kp UP  &kp RIGHT	&none	&none
					&none &none &none &none &none &none &none &none		&none &none &none     &none	    &none		&none			&none &none
													  &none	&none	&none	&none	&none		&none &none	&none     &none	    &none
					>;

					sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_DN PG_UP>;
		};
	};
};
